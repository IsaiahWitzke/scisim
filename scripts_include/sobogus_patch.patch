diff --git a/src/Core/BlockSolvers/ConstrainedSolverBase.hpp b/src/Core/BlockSolvers/ConstrainedSolverBase.hpp
index 4a628b9..00ce792 100644
--- a/src/Core/BlockSolvers/ConstrainedSolverBase.hpp
+++ b/src/Core/BlockSolvers/ConstrainedSolverBase.hpp
@@ -42,9 +42,9 @@ public:
 	Scalar eval ( const NSLaw &law, const ResT &y, const RhsT &x ) const ;
 
 	template < typename NSLaw, typename RhsT, typename ResT >
-	Scalar solve( const NSLaw &law, const RhsT &b, ResT &x ) const
+	Scalar solve( const NSLaw &law, const RhsT &b, ResT &x, unsigned& num_iterations, bool tryZeroAsWell ) const
 	{
-		return static_cast< const Derived& >( *this ).solve( law, b, x ) ;
+		return static_cast< const Derived& >( *this ).solve( law, b, x, num_iterations, tryZeroAsWell ) ;
 	}
 
 	//! Sets the system matrix and initializes internal structures
diff --git a/src/Core/BlockSolvers/GaussSeidel.hpp b/src/Core/BlockSolvers/GaussSeidel.hpp
index c70b67d..01da058 100644
--- a/src/Core/BlockSolvers/GaussSeidel.hpp
+++ b/src/Core/BlockSolvers/GaussSeidel.hpp
@@ -80,7 +80,7 @@ public:
 	  \param tryZeroAsWell If true, the algorithm will reset r to zero if that would result in a lower residual
 	  */
 	template < typename NSLaw, typename RhsT, typename ResT >
-	Scalar solve( const NSLaw &law, const RhsT &b, ResT &x, bool tryZeroAsWell = true ) const ;
+	Scalar solve( const NSLaw &law, const RhsT &b, ResT &x, unsigned& num_iterations, bool tryZeroAsWell ) const ;
 
 
 	//! Access to the current Coloring. Will be reset whenever the matrix is changed.
diff --git a/src/Core/BlockSolvers/GaussSeidel.impl.hpp b/src/Core/BlockSolvers/GaussSeidel.impl.hpp
index de50024..d668c42 100644
--- a/src/Core/BlockSolvers/GaussSeidel.impl.hpp
+++ b/src/Core/BlockSolvers/GaussSeidel.impl.hpp
@@ -41,7 +41,7 @@ GaussSeidel< BlockMatrixType >& GaussSeidel< BlockMatrixType >::setMatrix( const
 template < typename BlockMatrixType >
 template < typename NSLaw, typename RhsT, typename ResT >
 typename GaussSeidel< BlockMatrixType >::Scalar GaussSeidel< BlockMatrixType >::solve( const NSLaw &law,
-																						 const RhsT &b, ResT &x, bool tryZeroAsWell ) const
+																						 const RhsT &b, ResT &x, unsigned& num_iterations, bool tryZeroAsWell ) const
 {
 	assert( m_matrix ) ;
 
@@ -174,7 +174,7 @@ typename GaussSeidel< BlockMatrixType >::Scalar GaussSeidel< BlockMatrixType >::
 #endif
 
 	if( GSIter > m_maxIters ) x = x_best ;
-
+	num_iterations = GSIter;
 	return err_best ;
 
 }
diff --git a/src/Interfaces/FrictionProblem.cpp b/src/Interfaces/FrictionProblem.cpp
index 4dffab5..2bf3f3b 100644
--- a/src/Interfaces/FrictionProblem.cpp
+++ b/src/Interfaces/FrictionProblem.cpp
@@ -20,8 +20,7 @@
 
 #include "FrictionProblem.impl.hpp"
 
-#include "../Core/BlockSolvers/GaussSeidel.impl.hpp"
-#include "../Core/BlockSolvers/ProjectedGradient.impl.hpp"
+#include "Core/BlockSolvers/GaussSeidel.impl.hpp"
 
 
 namespace bogus {
@@ -51,65 +50,18 @@ void DualFrictionProblem< Dimension >::computeFrom(PrimalFrictionProblem<Dimensi
 }
 
 template< unsigned Dimension >
-double DualFrictionProblem< Dimension >::solveWith( GaussSeidelType &gs, double *r,
-										 const bool staticProblem ) const
+double DualFrictionProblem< Dimension >::solveWith( GaussSeidelType &gs, double *r, unsigned& num_iterations, bool tryZeroAsWell ) const
 {
 	gs.setMatrix( W );
 
-	return friction_problem::solve( *this, gs, r, staticProblem ) ;
-}
-
-template< unsigned Dimension >
-double DualFrictionProblem< Dimension >::solveWith( ProjectedGradientType &pg,
-													double *r ) const
-{
-	pg.setMatrix( W );
-
-	return friction_problem::solve( *this, pg, r, true ) ;
+	return friction_problem::solve( *this, gs, r, num_iterations, tryZeroAsWell ) ;
 }
 
 template< unsigned Dimension >
 double DualFrictionProblem< Dimension >::evalWith( const GaussSeidelType &gs,
-													 const double *r,
-													 const bool staticProblem ) const
-{
-	return friction_problem::eval( *this, gs, r, staticProblem ) ;
-}
-
-template< unsigned Dimension >
-double DualFrictionProblem< Dimension >::evalWith( const ProjectedGradientType &gs,
 													 const double *r ) const
 {
-	return friction_problem::eval( *this, gs, r, true) ;
-}
-
-
-template< unsigned Dimension >
-double DualFrictionProblem< Dimension >::solveCadoux(GaussSeidelType &gs, double *r, const unsigned cadouxIterations,
-		const Signal<unsigned, double> *callback ) const
-{
-	return friction_problem::solveCadoux( *this, gs, r, cadouxIterations, callback ) ;
-}
-
-template< unsigned Dimension >
-double DualFrictionProblem< Dimension >::solveCadoux(ProjectedGradientType &pg, double *r, const unsigned cadouxIterations,
-		const Signal<unsigned, double> *callback ) const
-{
-	return friction_problem::solveCadoux( *this, pg, r, cadouxIterations, callback ) ;
-}
-
-template< unsigned Dimension >
-double DualFrictionProblem< Dimension >::solveCadouxVel(GaussSeidelType &gs, double *u, const unsigned cadouxIterations,
-		const Signal<unsigned, double> *callback ) const
-{
-	return friction_problem::solveCadouxVel( *this, gs, u, cadouxIterations, callback ) ;
-}
-
-template< unsigned Dimension >
-double DualFrictionProblem< Dimension >::solveCadouxVel(ProjectedGradientType &pg, double *u, const unsigned cadouxIterations,
-		const Signal<unsigned, double> *callback ) const
-{
-	return friction_problem::solveCadouxVel( *this, pg, u, cadouxIterations, callback ) ;
+	return friction_problem::eval( *this, gs, r ) ;
 }
 
 template< unsigned Dimension >
@@ -142,19 +94,7 @@ void DualFrictionProblem< Dimension >::undoPermutation()
 	m_permutation.clear() ;
 }
 
-#ifdef BOGUS_INSTANTIATE_2D_SOC
 template struct DualFrictionProblem< 2u > ;
-template struct PrimalFrictionProblem< 2u > ;
-#endif
-
-#ifdef BOGUS_INSTANTIATE_3D_SOC
 template struct DualFrictionProblem< 3u > ;
-template struct PrimalFrictionProblem< 3u > ;
-#endif
-
-#ifdef BOGUS_INSTANTIATE_DYNAMIC_SOC
-template struct DualFrictionProblem< Eigen::Dynamic > ;
-template struct PrimalFrictionProblem< Eigen::Dynamic > ;
-#endif
 
 } //namespace bogus
diff --git a/src/Interfaces/FrictionProblem.hpp b/src/Interfaces/FrictionProblem.hpp
index a872c66..3389cdc 100644
--- a/src/Interfaces/FrictionProblem.hpp
+++ b/src/Interfaces/FrictionProblem.hpp
@@ -1,32 +1,10 @@
-/*
- * This file is part of So-bogus, a C++ sparse block matrix library and
- * Second Order Cone solver.
- *
- * Copyright 2013 Gilles Daviet <gdaviet@gmail.com>
- *
- * So-bogus is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, either version 2 of the License, or
- * (at your option) any later version.
-
- * So-bogus is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
-
- * You should have received a copy of the GNU General Public License
- * along with So-bogus.  If not, see <http://www.gnu.org/licenses/>.
-*/
-
 #ifndef BOGUS_FRICTION_PROBLEM_HPP
 #define BOGUS_FRICTION_PROBLEM_HPP
 
-#include "../Core/Block.hpp"
-#include "../Core/BlockSolvers.fwd.hpp"
-
-#include "../Extra/SecondOrder.fwd.hpp"
+#include "Core/Block.hpp"
+#include "Core/BlockSolvers.fwd.hpp"
 
-#include "../Core/Utils/Signal.hpp"
+#include "Extra/SecondOrder.fwd.hpp"
 
 namespace bogus
 {
@@ -71,8 +49,6 @@ struct DualFrictionProblem
 	typedef SOCLaw< Dimension, double, true  > CoulombLawType	;
 	typedef SOCLaw< Dimension, double, false > SOCLawType	;
 
-	typedef Signal< unsigned, double > SignalType ;
-
 	//! W -- Delassus operator
 	WType W ;
 
@@ -89,42 +65,17 @@ struct DualFrictionProblem
 	/*!
 	  \param gs The GaussSeidel< WType > solver to use
 	  \param r  Both the initial guess and the result
-	  \param staticProblem If true, solve this problem as a \b SOCQP instead of a Coulomb Friction problem
 	  \returns the error as returned by the GaussSeidel::solve() function
 	  */
-	double solveWith( GaussSeidelType &gs, double * r, const bool staticProblem = false ) const ;
-	double solveWith( ProjectedGradientType &pg, double * r ) const ;
+	double solveWith( GaussSeidelType &gs, double * r, unsigned& num_iterations, bool tryZeroAsWell ) const ;
 
 	//! Evaluate a residual using the GS's error function
 	/*!
 	  \param gs The GaussSeidel< WType > solver to use
 	  \param r  Both the current force
-	  \param staticProblem If true, eval this problem as a \b SOCQP instead of a Coulomb Friction problem
-
 	  \returns the error as returned by the GaussSeidel::eval() function
 	  */
-	double evalWith( const GaussSeidelType &gs, const double * r, const bool staticProblem = false ) const ;
-	double evalWith( const ProjectedGradientType &gs, const double * r ) const ;
-
-	//! Solves this problem using the Cadoux algorithm ( with fixed-point iteration )
-	/*!
-	  See \cite ACLM11
-	  \param gs The GaussSeidel< WType > solver to use
-	  \param r  Both the initial guess and the result
-	  \param fpIterations Number of fixed-point iterations
-	  \param callback 0, or a pointer to a user-defined function that takes ( unsigned iteration, double residual ) as arguments
-	  \returns the error as returned by the GaussSeidel::solve() function
-	  */
-	double solveCadoux( GaussSeidelType &gs, double * r, const unsigned fpIterations,
-		   const SignalType* callback = BOGUS_NULL_PTR(const SignalType) ) const ;
-	double solveCadoux( ProjectedGradientType &pg, double * r, const unsigned fpIterations,
-		   const SignalType* callback = BOGUS_NULL_PTR(const SignalType) ) const ;
-
-	//! Idem as solveCadoux, but interpreting the problem as r = Wu + b
-	double solveCadouxVel( GaussSeidelType &gs, double * u, const unsigned fpIterations,
-		   const SignalType* callback = BOGUS_NULL_PTR(const SignalType) ) const ;
-	double solveCadouxVel( ProjectedGradientType &pg, double * u, const unsigned fpIterations,
-		   const SignalType* callback = BOGUS_NULL_PTR(const SignalType) ) const ;
+	double evalWith( const GaussSeidelType &gs, const double * r ) const ;
 
 
 	//! \warning To use the permutation releated functions, all the blocks have to have the same size
diff --git a/src/Interfaces/FrictionProblem.impl.hpp b/src/Interfaces/FrictionProblem.impl.hpp
index 6e186d8..ea6ce90 100644
--- a/src/Interfaces/FrictionProblem.impl.hpp
+++ b/src/Interfaces/FrictionProblem.impl.hpp
@@ -19,10 +19,9 @@
 */
 
 #include "FrictionProblem.hpp"
-#include "Cadoux.hpp"
 
-#include "../Core/Block.impl.hpp"
-#include "../Extra/SecondOrder.impl.hpp"
+#include "Core/Block.impl.hpp"
+#include "Extra/SecondOrder.impl.hpp"
 
 namespace bogus {
 
@@ -43,18 +42,15 @@ void applyPermutation(
 template< unsigned Dimension, template <typename> class Method >
 static double solve( const DualFrictionProblem< Dimension >& dual,
 		const ConstrainedSolverBase< Method, typename DualFrictionProblem< Dimension >::WType > &gs,
-		double *r, const bool staticProblem )
+		double *r, unsigned& num_iterations, bool tryZeroAsWell )
 {
 	typename Eigen::VectorXd::MapType r_map ( r, dual.W.rows() ) ;
 
 	if( dual.permuted() )
 		applyPermutation< Dimension >( dual.permutation(), r_map, dual.W.majorIndex().innerOffsetsData() ) ;
 
-	double res = staticProblem
-			? gs.solve( typename DualFrictionProblem< Dimension >::SOCLawType
-						( dual.W.rowsOfBlocks(), dual.mu.data() ), dual.b, r_map )
-			: gs.solve( typename DualFrictionProblem< Dimension >::CoulombLawType
-						( dual.W.rowsOfBlocks(), dual.mu.data() ), dual.b, r_map ) ;
+	double res = gs.solve( typename DualFrictionProblem< Dimension >::CoulombLawType
+						( dual.W.rowsOfBlocks(), dual.mu.data() ), dual.b, r_map, num_iterations, tryZeroAsWell ) ;
 
 	if( dual.permuted() )
 		applyPermutation< Dimension >( dual.invPermutation(), r_map, dual.W.majorIndex().innerOffsetsData() ) ;
@@ -65,7 +61,7 @@ static double solve( const DualFrictionProblem< Dimension >& dual,
 template< unsigned Dimension, template <typename> class Method >
 static double eval( const DualFrictionProblem< Dimension >& dual,
 		const ConstrainedSolverBase< Method, typename DualFrictionProblem< Dimension >::WType > &gs,
-		const double *r_data, const bool staticProblem  )
+		const double *r_data  )
 {
 	Eigen::VectorXd r = Eigen::VectorXd::Map( r_data, dual.W.rows() ) ;
 
@@ -74,53 +70,12 @@ static double eval( const DualFrictionProblem< Dimension >& dual,
 
 	const Eigen::VectorXd u = dual.W*r + dual.b ;
 
-	double res = staticProblem
-			? gs.eval( typename DualFrictionProblem< Dimension >::SOCLawType
-					   ( dual.W.rowsOfBlocks(), dual.mu.data() ), u, r )
-			: gs.eval( typename DualFrictionProblem< Dimension >::CoulombLawType
+	double res = gs.eval( typename DualFrictionProblem< Dimension >::CoulombLawType
 					   ( dual.W.rowsOfBlocks(), dual.mu.data() ), u, r ) ;
 
 	return res ;
 }
 
-template< unsigned Dimension, template <typename> class Method >
-static double solveCadoux( const DualFrictionProblem< Dimension >& problem,
-		ConstrainedSolverBase< Method, typename DualFrictionProblem< Dimension >::WType > &minimizer,
-		double *r, const unsigned cadouxIterations, const Signal<unsigned, double> *callback )
-{
-	Eigen::Map< Eigen::VectorXd > r_map ( r, problem.W.rows() ) ;
-
-	if( problem.permuted() )
-		applyPermutation< Dimension >( problem.permutation(), r_map, problem.W.majorIndex().innerOffsetsData() ) ;
-
-	const double res = solveCadoux< Dimension >( problem.W, problem.b.data(), problem.mu.data(),
-									minimizer, r, cadouxIterations, callback ) ;
-
-	if( problem.permuted() )
-		applyPermutation< Dimension >( problem.invPermutation(), r_map, problem.W.majorIndex().innerOffsetsData() ) ;
-
-	return res ;
-}
-
-template< unsigned Dimension, template <typename> class Method >
-static double solveCadouxVel( const DualFrictionProblem< Dimension >& problem,
-		ConstrainedSolverBase< Method, typename DualFrictionProblem< Dimension >::WType > &minimizer,
-		double *u, const unsigned cadouxIterations, const Signal<unsigned, double> *callback )
-{
-	Eigen::Map< Eigen::VectorXd > u_map ( u, problem.W.rows() ) ;
-
-	if( problem.permuted() )
-		applyPermutation< Dimension >( problem.permutation(), u_map, problem.W.majorIndex().innerOffsetsData() ) ;
-
-	const double res = solveCadouxVel< Dimension >( problem.W, problem.b.data(), problem.mu.data(),
-									minimizer, u, cadouxIterations, callback ) ;
-
-	if( problem.permuted() )
-		applyPermutation< Dimension >( problem.invPermutation(), u_map, problem.W.majorIndex().innerOffsetsData() ) ;
-
-	return res ;
-}
-
 } //namespace friction_problem
 
 } //namespace bogus
